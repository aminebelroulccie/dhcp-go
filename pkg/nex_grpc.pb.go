// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NexClient is the client API for Nex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexClient interface {
	// membership
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	AddMembers(ctx context.Context, in *MemberList, opts ...grpc.CallOption) (*AddMembersResponse, error)
	DeleteMembers(ctx context.Context, in *DeleteMembersRequest, opts ...grpc.CallOption) (*DeleteMembersResponse, error)
	UpdateMembers(ctx context.Context, in *UpdateList, opts ...grpc.CallOption) (*UpdateMembersResponse, error)
	ChangeMemberID(ctx context.Context, in *ChangeList, opts ...grpc.CallOption) (*ChangeMemberIDResponse, error)
	// network
	GetNetworks(ctx context.Context, in *GetNetworksRequest, opts ...grpc.CallOption) (*GetNetworksResponse, error)
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkResponse, error)
	UpdateNetwork(ctx context.Context, in *NetworkUpdateRequest, opts ...grpc.CallOption) (*NetworkUpdateResponse, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error)
	// interface
	AddInterface(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceResponse, error)
	DeleteInterface(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceResponse, error)
}

type nexClient struct {
	cc grpc.ClientConnInterface
}

func NewNexClient(cc grpc.ClientConnInterface) NexClient {
	return &nexClient{cc}
}

func (c *nexClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/GetMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) AddMembers(ctx context.Context, in *MemberList, opts ...grpc.CallOption) (*AddMembersResponse, error) {
	out := new(AddMembersResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/AddMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) DeleteMembers(ctx context.Context, in *DeleteMembersRequest, opts ...grpc.CallOption) (*DeleteMembersResponse, error) {
	out := new(DeleteMembersResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/DeleteMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) UpdateMembers(ctx context.Context, in *UpdateList, opts ...grpc.CallOption) (*UpdateMembersResponse, error) {
	out := new(UpdateMembersResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/UpdateMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) ChangeMemberID(ctx context.Context, in *ChangeList, opts ...grpc.CallOption) (*ChangeMemberIDResponse, error) {
	out := new(ChangeMemberIDResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/ChangeMemberID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) GetNetworks(ctx context.Context, in *GetNetworksRequest, opts ...grpc.CallOption) (*GetNetworksResponse, error) {
	out := new(GetNetworksResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/GetNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkResponse, error) {
	out := new(AddNetworkResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/AddNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) UpdateNetwork(ctx context.Context, in *NetworkUpdateRequest, opts ...grpc.CallOption) (*NetworkUpdateResponse, error) {
	out := new(NetworkUpdateResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/UpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error) {
	out := new(DeleteNetworkResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) AddInterface(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceResponse, error) {
	out := new(InterfaceResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/AddInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexClient) DeleteInterface(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceResponse, error) {
	out := new(InterfaceResponse)
	err := c.cc.Invoke(ctx, "/nex.Nex/DeleteInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexServer is the server API for Nex service.
// All implementations must embed UnimplementedNexServer
// for forward compatibility
type NexServer interface {
	// membership
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	AddMembers(context.Context, *MemberList) (*AddMembersResponse, error)
	DeleteMembers(context.Context, *DeleteMembersRequest) (*DeleteMembersResponse, error)
	UpdateMembers(context.Context, *UpdateList) (*UpdateMembersResponse, error)
	ChangeMemberID(context.Context, *ChangeList) (*ChangeMemberIDResponse, error)
	// network
	GetNetworks(context.Context, *GetNetworksRequest) (*GetNetworksResponse, error)
	GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error)
	AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkResponse, error)
	UpdateNetwork(context.Context, *NetworkUpdateRequest) (*NetworkUpdateResponse, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error)
	// interface
	AddInterface(context.Context, *InterfaceRequest) (*InterfaceResponse, error)
	DeleteInterface(context.Context, *InterfaceRequest) (*InterfaceResponse, error)
	mustEmbedUnimplementedNexServer()
}

// UnimplementedNexServer must be embedded to have forward compatible implementations.
type UnimplementedNexServer struct {
}

func (UnimplementedNexServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedNexServer) AddMembers(context.Context, *MemberList) (*AddMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMembers not implemented")
}
func (UnimplementedNexServer) DeleteMembers(context.Context, *DeleteMembersRequest) (*DeleteMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMembers not implemented")
}
func (UnimplementedNexServer) UpdateMembers(context.Context, *UpdateList) (*UpdateMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembers not implemented")
}
func (UnimplementedNexServer) ChangeMemberID(context.Context, *ChangeList) (*ChangeMemberIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMemberID not implemented")
}
func (UnimplementedNexServer) GetNetworks(context.Context, *GetNetworksRequest) (*GetNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworks not implemented")
}
func (UnimplementedNexServer) GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedNexServer) AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetwork not implemented")
}
func (UnimplementedNexServer) UpdateNetwork(context.Context, *NetworkUpdateRequest) (*NetworkUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedNexServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedNexServer) AddInterface(context.Context, *InterfaceRequest) (*InterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterface not implemented")
}
func (UnimplementedNexServer) DeleteInterface(context.Context, *InterfaceRequest) (*InterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (UnimplementedNexServer) mustEmbedUnimplementedNexServer() {}

// UnsafeNexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexServer will
// result in compilation errors.
type UnsafeNexServer interface {
	mustEmbedUnimplementedNexServer()
}

func RegisterNexServer(s grpc.ServiceRegistrar, srv NexServer) {
	s.RegisterService(&Nex_ServiceDesc, srv)
}

func _Nex_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/AddMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).AddMembers(ctx, req.(*MemberList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_DeleteMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).DeleteMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/DeleteMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).DeleteMembers(ctx, req.(*DeleteMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_UpdateMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).UpdateMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/UpdateMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).UpdateMembers(ctx, req.(*UpdateList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_ChangeMemberID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).ChangeMemberID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/ChangeMemberID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).ChangeMemberID(ctx, req.(*ChangeList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_GetNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).GetNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/GetNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).GetNetworks(ctx, req.(*GetNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).AddNetwork(ctx, req.(*AddNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).UpdateNetwork(ctx, req.(*NetworkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_AddInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).AddInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/AddInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).AddInterface(ctx, req.(*InterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nex_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nex.Nex/DeleteInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexServer).DeleteInterface(ctx, req.(*InterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nex_ServiceDesc is the grpc.ServiceDesc for Nex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nex.Nex",
	HandlerType: (*NexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMembers",
			Handler:    _Nex_GetMembers_Handler,
		},
		{
			MethodName: "AddMembers",
			Handler:    _Nex_AddMembers_Handler,
		},
		{
			MethodName: "DeleteMembers",
			Handler:    _Nex_DeleteMembers_Handler,
		},
		{
			MethodName: "UpdateMembers",
			Handler:    _Nex_UpdateMembers_Handler,
		},
		{
			MethodName: "ChangeMemberID",
			Handler:    _Nex_ChangeMemberID_Handler,
		},
		{
			MethodName: "GetNetworks",
			Handler:    _Nex_GetNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _Nex_GetNetwork_Handler,
		},
		{
			MethodName: "AddNetwork",
			Handler:    _Nex_AddNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _Nex_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Nex_DeleteNetwork_Handler,
		},
		{
			MethodName: "AddInterface",
			Handler:    _Nex_AddInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _Nex_DeleteInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/nex.proto",
}
